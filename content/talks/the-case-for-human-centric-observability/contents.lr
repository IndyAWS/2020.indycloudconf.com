_model: talk
---
_template: talk.jade
---
speaker: Austin Parker
---
bio:
Austin Parker has been causing problems for himself with computers for most of his life, and has learned something of their wily ways. Professionally, he’s been everything from a short-order cook to a Software Architect to an Aspiring Podcaster to everything in-between. These days, he’s an Open Source Software Engineer at LightStep (https://www.lightstep.com) working on the OpenTracing (https://www.opentracing.io) project and figuring out ways to observe complex distributed systems more easily, and with more confidence. You can find him on Twitter @austinlparker.
---
company: LightStep
---
twitter: @austinlparker
---
website: https://aparker.io
---
video:
---
title:  The Case For Human-Centric Observability
---
scheduled_date: 2020-03-27
---
scheduled_time: 1:30pm
---
track: grand_forum
---
abstract:
Modern systems have resulted in an explosion of complexity for organizations of every size, shape, and purpose. In an effort to create more resilient and reliable software, we’ve cast around for solutions to tame and manage this complexity. Observability practices have come to be seen as essential for operating systems at scale, but in practice they’re often seen as technical solutions to what is ultimately a social problem: Software, at the end of the day, is built and run by people.

Human-Centric Observability is a methodology to evaluate observability practices by how they impact, and are built around, three distinct groups of people: external users, internal users, and engineers. In this talk, you’ll learn how to identify these groups and the value of putting them at the center of your observability practice. You’ll take away valuable insights from years of building and running deep systems at scale, and how we’ve built not only resilient software, but a resilient organization – one that can adapt to changing requirements and needs. At the end of this talk, you’ll have a framework to not only evaluate your own internal practices, but also be inspired to do more to make on-call suck less for your team.
